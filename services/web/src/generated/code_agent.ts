// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: code_agent.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "code_editor";

export interface IssueFixRequest {
  fullRepoName: string;
  issue: Issue | undefined;
}

export interface Issue {
  title: string;
  body: string;
}

export interface IssueFixResponse {
  /** TODO add status code */
  pullRequestUrl: string;
}

function createBaseIssueFixRequest(): IssueFixRequest {
  return { fullRepoName: "", issue: undefined };
}

export const IssueFixRequest: MessageFns<IssueFixRequest> = {
  encode(message: IssueFixRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fullRepoName !== "") {
      writer.uint32(10).string(message.fullRepoName);
    }
    if (message.issue !== undefined) {
      Issue.encode(message.issue, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IssueFixRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIssueFixRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fullRepoName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.issue = Issue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IssueFixRequest {
    return {
      fullRepoName: isSet(object.fullRepoName) ? globalThis.String(object.fullRepoName) : "",
      issue: isSet(object.issue) ? Issue.fromJSON(object.issue) : undefined,
    };
  },

  toJSON(message: IssueFixRequest): unknown {
    const obj: any = {};
    if (message.fullRepoName !== "") {
      obj.fullRepoName = message.fullRepoName;
    }
    if (message.issue !== undefined) {
      obj.issue = Issue.toJSON(message.issue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IssueFixRequest>, I>>(base?: I): IssueFixRequest {
    return IssueFixRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IssueFixRequest>, I>>(object: I): IssueFixRequest {
    const message = createBaseIssueFixRequest();
    message.fullRepoName = object.fullRepoName ?? "";
    message.issue = (object.issue !== undefined && object.issue !== null) ? Issue.fromPartial(object.issue) : undefined;
    return message;
  },
};

function createBaseIssue(): Issue {
  return { title: "", body: "" };
}

export const Issue: MessageFns<Issue> = {
  encode(message: Issue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.body !== "") {
      writer.uint32(18).string(message.body);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Issue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIssue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Issue {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
    };
  },

  toJSON(message: Issue): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Issue>, I>>(base?: I): Issue {
    return Issue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Issue>, I>>(object: I): Issue {
    const message = createBaseIssue();
    message.title = object.title ?? "";
    message.body = object.body ?? "";
    return message;
  },
};

function createBaseIssueFixResponse(): IssueFixResponse {
  return { pullRequestUrl: "" };
}

export const IssueFixResponse: MessageFns<IssueFixResponse> = {
  encode(message: IssueFixResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pullRequestUrl !== "") {
      writer.uint32(10).string(message.pullRequestUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IssueFixResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIssueFixResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pullRequestUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IssueFixResponse {
    return { pullRequestUrl: isSet(object.pullRequestUrl) ? globalThis.String(object.pullRequestUrl) : "" };
  },

  toJSON(message: IssueFixResponse): unknown {
    const obj: any = {};
    if (message.pullRequestUrl !== "") {
      obj.pullRequestUrl = message.pullRequestUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IssueFixResponse>, I>>(base?: I): IssueFixResponse {
    return IssueFixResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IssueFixResponse>, I>>(object: I): IssueFixResponse {
    const message = createBaseIssueFixResponse();
    message.pullRequestUrl = object.pullRequestUrl ?? "";
    return message;
  },
};

export type CodeAgentService = typeof CodeAgentService;
export const CodeAgentService = {
  /** Generate code changes and Submit pull request to fix given issue */
  fixIssue: {
    path: "/code_editor.CodeAgent/FixIssue",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: IssueFixRequest) => Buffer.from(IssueFixRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => IssueFixRequest.decode(value),
    responseSerialize: (value: IssueFixResponse) => Buffer.from(IssueFixResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => IssueFixResponse.decode(value),
  },
} as const;

export interface CodeAgentServer extends UntypedServiceImplementation {
  /** Generate code changes and Submit pull request to fix given issue */
  fixIssue: handleUnaryCall<IssueFixRequest, IssueFixResponse>;
}

export interface CodeAgentClient extends Client {
  /** Generate code changes and Submit pull request to fix given issue */
  fixIssue(
    request: IssueFixRequest,
    callback: (error: ServiceError | null, response: IssueFixResponse) => void,
  ): ClientUnaryCall;
  fixIssue(
    request: IssueFixRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: IssueFixResponse) => void,
  ): ClientUnaryCall;
  fixIssue(
    request: IssueFixRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: IssueFixResponse) => void,
  ): ClientUnaryCall;
}

export const CodeAgentClient = makeGenericClientConstructor(CodeAgentService, "code_editor.CodeAgent") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CodeAgentClient;
  service: typeof CodeAgentService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
